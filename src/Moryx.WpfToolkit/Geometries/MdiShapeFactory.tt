<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly Name="Microsoft.CSharp, Version=4.0.0.0, Culture=neutral" #>
<#@ assembly name="$(SolutionDir)packages\Newtonsoft.Json.12.0.3\lib\net45\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ output extension=".cs" #>
// Copyright (c) 2020, Phoenix Contact GmbH & Co. KG
// Licensed under the Apache License, Version 2.0

using System.Collections.Generic;
using System.Windows.Media;
<#
var currentPath = Host.ResolvePath(string.Empty);
var jsonFile = Path.Combine(currentPath, "mdi-5.0.45.json");
dynamic icons = JArray.Parse(File.ReadAllText(jsonFile));
string GetName(string iconName)
{
    var name = $"{iconName}".Replace('-', ' ');
    var textInfo = CultureInfo.CurrentCulture.TextInfo;
    return textInfo.ToTitleCase(name).Replace(' ', '_');
}
#>

namespace Moryx.WpfToolkit
{
    // JSON is generated by
    //     const util = require('@mdi/util');
    //     const icons = util.getMeta(true);
    //     util.write("icons.json", JSON.stringify(icons, null, 2));
    /// Icons licenced under Apache 2.0
    /// https://materialdesignicons.com/

    /// <summary>
    /// Enum of icons from the material design
    /// </summary>
    public enum MdiShapeType
    {
<#
foreach (dynamic icon in icons)
{
#>
        /// <summary>
        /// MDI - Author: <#= GetName(icon.author) #>, Version: <#= GetName(icon.version) #>
        /// </summary>
        <#= GetName(icon.name) #>,

<#
}
#>
    }

    /// <summary>
    /// Factory that creates all <see cref="MdiShapeType"/> icons
    /// </summary>
    public static class MdiShapeFactory
    {
        private static readonly Dictionary<MdiShapeType, string> MdiGeometries = new Dictionary<MdiShapeType, string>();

        static MdiShapeFactory()
        {
            // Icons licenced under Apache 2.0
            // https://materialdesignicons.com/

<#
foreach (var icon in icons)
{
#>
            MdiGeometries.Add(MdiShapeType.<#=GetName(icon.name)#>, "<#= icon.path #>");
<#
}
#>
        }

        /// <summary>
        /// Creates the icon by given <see cref="MdiShapeType"/>
        /// </summary>
        public static Geometry GetShapeGeometry(MdiShapeType shapeType)
        {
            return !MdiGeometries.ContainsKey(shapeType) ? null : Geometry.Parse(MdiGeometries[shapeType]);
        }
    }
}